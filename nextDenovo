#!/usr/bin/env python

import sys
import os
import re
import argparse
import signal
import shutil
from glob import iglob, glob

SCRIPT_PATH = os.path.dirname(os.path.realpath(__file__))
sys.path.append(SCRIPT_PATH + '/lib/')
from kit import *

log = ''

class HelpFormatter(argparse.RawDescriptionHelpFormatter,argparse.ArgumentDefaultsHelpFormatter):
	pass

def set_task(cfg, task, args = None):
	cmd = ''
	path = ''
	if task == 'db_split':
		cmd = db_split(cfg)
		path = cfg['raw_aligndir'] + '/01.db_split.sh'
	elif task == 'db_local':
		path = cfg['raw_aligndir'] + '/01.db_local.sh'
		cmd = db_local(cfg, path[:-3] + '_clean.sh')
	elif task == 'raw_align':
		path = cfg['raw_aligndir'] + '/02.raw_align.sh'
		cmd = raw_align(cfg)
	elif task == 'sort_align':
		path = cfg['raw_aligndir'] + '/03.sort_align.sh'
		cmd = sort_align(cfg)
	elif task == "get_cns":
		path = cfg['cns_aligndir'] + '/01.get_cns.sh'
		cmd = get_cns(cfg, args)
	write2file(cmd, path)
	return path

def get_cns(cfg, args):
	cmd = ''
	d = cfg['cns_aligndir'] + '/'
	for sort_align in args:
		cmd += 'python ' +  SCRIPT_PATH + '/lib/nextCorrector.py ' +  ' -f ' + d + \
			'/01.get_cns.input.idxs -i ' + sort_align + ' ' +  cfg['correction_options'] +\
			' -o cns.fasta;\n'
	return cmd

def pre_idxs(cfg, out_file):
	with open (cfg['cns_aligndir'] + '/'  + out_file, 'w') as OUT:
		d = cfg['raw_aligndir'] + '/'
		for part_file in iglob(d + '.input.part.*.idx'):
			part_file = cfg['usetempdir'] + '/' + part_file.split('/')[-1] if 'usetempdir' in cfg else part_file
			print >>OUT, part_file
		for part_file in iglob(d + '.input.seed.*.idx'):
			part_file = cfg['usetempdir'] + '/' + part_file.split('/')[-1] if 'usetempdir' in cfg else part_file
			print >>OUT, part_file

def get_sort_align_output(subtasks):

	seed_result = []
	seed_ovl_iglob = 'input.seed.*.sorted.ovl'
	for subtask in subtasks:
		filenames = list(iglob(os.path.dirname(subtask) + '/' + seed_ovl_iglob))
		if len(filenames) == 1:
			seed_result.append(filenames[0])
		else:
			log.error('Failed to find output file pattern for task: ' + subtask)
			sys.exit(1)
	return seed_result

def get_align_output(subtasks):
	
	seed_result = {}
	seed_ovl_re = re.compile(r"input\.seed\.(\d+)\.2bit\.\d+\.ovl")
	seed_ovl_iglob = 'input.seed.*.ovl'
	for subtask in subtasks:
		filenames = list(iglob(os.path.dirname(subtask) + '/' + seed_ovl_iglob))
		if len(filenames) >= 1:
			for filename in filenames:
				g = seed_ovl_re.search(filename)
				if g:
					seed_idx = g.group(1)
					if seed_idx not in seed_result:
						seed_result[seed_idx] = []
					seed_result[seed_idx].append(filename)
				else:
					log.error('Failed to find output file pattern for task: ' + subtask)
					sys.exit(1)
		elif len(filenames) > 1:
			log.error('Output error for task: ' + subtask)
			sys.exit(1)
	return seed_result

def get_seed_idx(subtask):

	seed_ovl_re = re.compile(r"\.input\.seed\.(\d+)\.idx")
	with open(subtask) as IN:
		g = seed_ovl_re.search(IN.read())
		if g:
			return g.group(1)
		else:
			log.error('Failed to find shell file pattern for task: ' + subtask)
			sys.exit(1)

def clean_raw_align_output(finished_tasks):
	for finished_task in finished_tasks:
		if os.path.exists(finished_task + '.done'):
			with open (os.path.dirname(finished_task) + '/input.fofn') as IN:
				for input_file in IN:
					input_file = input_file.strip()
					os.remove(input_file)
					log.info('remove temporary result: ' + input_file)

def pre_sort_align_input(sort_align_input, subtasks):
	for subtask in subtasks:
		d = os.path.dirname(subtask)
		input_fofn = d + '/input.fofn'
		seed_idx = get_seed_idx(subtask)
		with open(input_fofn, 'w') as OUT:
			for input_file in sort_align_input[seed_idx]:
				print >>OUT, input_file

def sort_align(cfg):
	cmd = ''
	d = cfg['raw_aligndir'] + '/'
	for seed_file in iglob(d + '.input.seed.*.idx'):
		cmd += SCRIPT_PATH + '/bin/sort_overlap'  + ' -i ' + seed_file + ' -o ' + os.path.basename(seed_file)[1:-3] + 'sorted.ovl input.fofn;\n' 
	return cmd

def raw_align(cfg):
	cmd = ''
	d = cfg['raw_aligndir'] + '/'
	k = 0
	seed_files = glob(d + 'input.seed*2bit') #TODO: set global var 
	part_files = glob(d + 'input.part*2bit')
	for i in range(len(seed_files)):
		seed_file = seed_files[i]

		if 'usetempdir' in cfg:
			seed_file = cfg['usetempdir'] + '/' + os.path.basename(seed_file)

		for j in range(len(part_files)):
			part_file = part_files[j]

			if 'usetempdir' in cfg:
				part_file = cfg['usetempdir'] + '/' + os.path.basename(part_file)

			cmd += SCRIPT_PATH + '/bin/minimap2-hack --dual=yes '  + cfg['minimap2_options'] + ' ' + seed_file  + ' ' + part_file + \
				' > ' + os.path.basename(seed_file) + '.' +  str(k) + '.ovl;\n'
			k += 1

		for t in range(i, len(seed_files)):
			part_file = seed_files[t]
			
			if 'usetempdir' in cfg:
				part_file = cfg['usetempdir'] + '/' + os.path.basename(part_file)

			if part_file != seed_file:
				cmd += SCRIPT_PATH + '/bin/minimap2-hack -I 3G --dual=yes ' + cfg['minimap2_options'] + ' ' + seed_file  + ' ' + part_file + \
					' > ' + os.path.basename(seed_file) + '.' +  str(k) + '.ovl;'
				cmd += 'ln -sf ' + os.path.basename(seed_file) + '.' +  str(k) + '.ovl ' + os.path.basename(part_file) + '.' +  str(k) + '.ovl;'
			else:
				cmd += SCRIPT_PATH + '/bin/minimap2-hack -I 3G ' + cfg['minimap2_options'] + ' ' + seed_file  + ' ' + part_file + \
					' > ' + os.path.basename(seed_file) + '.' +  str(k) + '.ovl;'
			cmd += '\n'
			k += 1
	return cmd

def get_availablenodes(cfg):
	node = ''
	ava_nodes = []
	for line in os.popen("qhost -q").read().split('\n'):
		nodes = line.strip().split()
		nodes_len = len(nodes)
		if nodes_len == 11:
			node = nodes[0] if '-' not in nodes[6:9] else ''
		elif node and nodes_len > 2 and nodes[0] == cfg['sge_queue'] and node not in ava_nodes:
			ava_nodes.append(node)
	return ava_nodes

def db_local(cfg, clean_path):
	cmd = ''
	cmd_clean = ''
	d = cfg['raw_aligndir'] + '/'
	seed_files = glob(d + 'input.seed*2bit')
	part_files = glob(d + 'input.part*2bit')

	ava_nodes = get_availablenodes(cfg)
	log.info('find ' + str(len(ava_nodes)) + ' available nodes')
	for j in ava_nodes:
		cmd_clean += 'ssh -o ConnectTimeout=15 ' + j + \
			' \"if [ -d ' + cfg['usetempdir'] + ' ];' + \
			'then rm -rf ' + cfg['usetempdir']  + ' && echo remove ' + cfg['usetempdir'] + ' in node ' + j + ';fi;\"\n'

		cmd += 'ssh -o ConnectTimeout=15 ' + j + \
			' \"if [ -d ' + cfg['usetempdir'] + ' ];' + \
			'then echo ' + cfg['usetempdir'] + ' existed, exit ....; exit 1;' + \
			'else mkdir -p ' + cfg['usetempdir'] + ';'

		for i in seed_files + part_files:
			idirname = os.path.dirname(i)
			ibasename = os.path.basename(i)
			idx = idirname + '/.' + ibasename[:-4] + 'idx'
			cmd += 'cp -n ' + i + ' ' + cfg['usetempdir']  + '/;' + \
				'cp ' + idx + ' ' + cfg['usetempdir']  + '/;'

		cmd += 'fi;\"\n'

	write2file(cmd_clean, clean_path)
	log.warning('please run shell file: [' +  clean_path  + '] to clean ' + cfg['usetempdir'] + ' in each node.')
	return cmd

def db_split(cfg):
	cmd = ' '.join([SCRIPT_PATH + '/bin/seq_split_filter',
		'-f', cfg['read_cuoff'],
		'-s', cfg['seed_cutoff'],
		'-b', cfg['blocksize'],
		'-n', cfg['seed_cutfiles'],
		'-d', cfg['raw_aligndir'],
		cfg['input_fofn']
		])
	return cmd

def main(args):
	if not args[1]:
		parser.print_help()
		sys.exit(1)

	global log
	log_file = 'pid' + str(os.getpid()) + '.' + args[0].log
	log = plog(log_file)
	from configParser import ConfigParser
	from taskControl import Task, Run

	signal.signal(signal.SIGINT, Run.kill)
	signal.signal(signal.SIGTERM, Run.kill)

	log.info('start...')
	log.info('logfile: ' + log_file)
	cfg = ConfigParser(args[1][0]).cfg
	job_prefix = cfg['job_prefix']
	log.info('options: ')
	log.info(cfg)

	for d in (cfg['workdir'], cfg['raw_aligndir'], cfg['cns_aligndir'], cfg['ctg_graphdir']):
		if d != cfg['workdir'] and not cfg['rewrite']:
			if os.path.exists(d):
				for i in range(100):
					e = d + '.backup' + str(i)
					if not os.path.exists(e):
						shutil.move(d, e)
						log.warning('mv ' + d + ' to ' + e)

		if not pmkdir(d):
			log.info('skip mkdir: ' + d)
		else:
			log.info('mkdir: ' + d)

	if cfg['task'] in ['all', 'correct']:
		task = Task(set_task(cfg, 'db_split'), prefix = 'db_split')
		if not task.check():
			task.set_subtasks(job_prefix = job_prefix)
			task.set_run(max_pa_jobs = 1, job_type = cfg['job_type'], sge_options = cfg['sge_options'])
			task.run.start()
			if task.run.check():
				task.set_task_done()
				log.info('db_split done')
			else:
				log.error('db_split failed: please check the following jobs:')
				for subtask in task.run.unfinished_tasks:
					log.error(subtask)
				sys.exit(1)
		else:
			log.info('skip step: db_split')

		if 'usetempdir' in cfg:
			task = Task(set_task(cfg, 'db_local'), prefix = 'db_local', convertpath=False)
			if not task.check():
				task.set_subtasks(job_prefix = job_prefix)
				task.set_run(max_pa_jobs = 30, job_type = 'local')
				task.run.start()
				if task.run.check():
					task.set_task_done()
					log.info('db_local done')
				else:
					log.error('db_local failed: please check the following jobs:')
					for subtask in task.run.unfinished_tasks:
						log.error(subtask)
					sys.exit(1)
			else:
				log.info('skip step: db_local')

		task = Task(set_task(cfg, 'raw_align'), prefix = 'raw_align', convertpath = False)
		task.set_subtasks(job_prefix = job_prefix)
		if not task.check():
			task.set_run(max_pa_jobs = cfg['pa_raw_align'] , bash = '/bin/bash', job_type = cfg['job_type'], \
				sge_options = cfg['sge_options'], vf = '30G', cpu = cfg['minimap2_threads'])
			total_tasks = len(task.run.unfinished_tasks)
			task.run.start()

			while (not task.run.check()):
				if len(task.run.unfinished_tasks) == total_tasks or not cfg['rerun']:
					log.error('raw_align failed: please check the following jobs:')
					for subtask in task.run.unfinished_tasks:
						log.error(subtask)
					sys.exit(1)
				else:
					log.info(str(len(task.run.unfinished_tasks)) + ' raw_align jobs failed, and rerun with the '+ str(cfg['rerun']) + ' time')
					task.run.rerun()
					cfg['rerun'] -= 1
			else:
				task.set_task_done()
				log.info('raw_align done')
		else:
			log.info('skip step: raw_align')

		sort_align_input = get_align_output(task.subtasks)
		task = Task(set_task(cfg, 'sort_align'), prefix = 'sort_align', convertpath = False)
		task.set_subtasks(job_prefix = job_prefix)
		if not task.check():
			task.set_run(max_pa_jobs = cfg['pa_raw_align'], bash = '/bin/bash', job_type = cfg['job_type'], \
				sge_options = cfg['sge_options'], vf = '50G')#need update memory required
			pre_sort_align_input(sort_align_input, task.run.unfinished_tasks)
			task.run.start()
			if task.run.check():
				clean_raw_align_output(task.subtasks)
				task.set_task_done()
				log.info('sort_align done')
			else:
				log.error('sort_align failed: please check the following jobs:')
				for subtask in task.run.unfinished_tasks:
					log.error(subtask)
				sys.exit(1)
		else:
			log.info('skip step: sort_align')

		get_cns_input = get_sort_align_output(task.subtasks)
		task = Task(set_task(cfg, 'get_cns', get_cns_input), prefix = 'get_cns', convertpath = False)
		if not task.check():
			task.set_subtasks(job_prefix = job_prefix)
			task.set_run(max_pa_jobs = cfg['pa_correction'] , bash = '/bin/bash', job_type = cfg['job_type'], \
				sge_options = cfg['sge_options'], cpu = cfg['cns_threads'])
			pre_idxs(cfg, '01.get_cns.input.idxs')
			task.run.start()
			if task.run.check():
				task.set_task_done()
				log.info('get_cns done')
			else:
				log.error('get_cns failed: please check the following jobs:')
				for subtask in task.run.unfinished_tasks:
					log.error(subtask)
				sys.exit(1)
		else:
			log.info('skip step: get_cns')

	log.info('cns finished...')

if __name__ == '__main__':
	parser = argparse.ArgumentParser(
		add_help = False,
		formatter_class = HelpFormatter,
		description = '''
nextDenovo:
	Fast and accurate de novo assembler for third generation sequencing (TGS) reads

exmples: 
	%(prog)s run.cfg
'''
	)
	parser.add_argument ('-l','--log',metavar = 'FILE',type = str, default = 'log.info',
		help = 'log file.')
	parser.add_argument('-v', '--version', action='version', version='%(prog)s Beta v1.0')
	parser.add_argument('-h', '--help',  action='help',
		help = 'please use the config file to pass parameters')
	args = parser.parse_known_args()
	main(args)
